package com.github.fluorumlabs.disconnect.vaadin.elements;

import com.github.fluorumlabs.disconnect.core.annotations.Import;
import com.github.fluorumlabs.disconnect.core.annotations.NpmPackage;
import com.github.fluorumlabs.disconnect.vaadin.Vaadin;
import com.github.fluorumlabs.disconnect.vaadin.constants.CrudEditorPosition;
import com.github.fluorumlabs.disconnect.vaadin.dataproviders.GridDataProvider;
import com.github.fluorumlabs.disconnect.vaadin.elements.mixins.ElementMixin;
import com.github.fluorumlabs.disconnect.vaadin.elements.mixins.ThemableMixin;
import com.github.fluorumlabs.disconnect.vaadin.i18n.CrudI18n;
import js.lang.Any;
import js.util.collections.Array;
import js.web.dom.HTMLElement;
import org.teavm.jso.JSByRef;
import org.teavm.jso.JSProperty;

import javax.annotation.Nullable;

/**
 * `<vaadin-crud>` is a Web Component for [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete)
 * operations.
 * <p>
 * ### Quick Start
 * <p>
 * Assign an array to the [`items`](#/elements/vaadin-crud#property-items) property.
 * <p>
 * A grid and an editor will be automatically generated and configured based on the data structure provided.
 * <p>
 * #### Example:
 * ```html
 * <vaadin-crud items='[{"name": "John", "surname": "Lennon", "role": "singer"},
 * {"name": "Ringo", "surname": "Starr", "role": "drums"}]'></vaadin-crud>
 * ```
 * <p>
 * ### Data Provider Function
 * <p>
 * Otherwise, you can provide a [`dataProvider`](#/elements/vaadin-crud#property-dataProvider) function.
 * #### Example:
 * ```html
 * <vaadin-crud></vaadin-crud>
 * ```
 * ```js
 * const crud = document.querySelector('vaadin-crud');
 * const users = [{'name': 'John', 'surname': 'Lennon', 'role': 'singer'}, ...];
 * crud.dataProvider = function(params, callback) {
 * const chunk = users.slice(params.page * params.pageSize, params.page * params.pageSize + params.pageSize);
 * callback(chunk, people.length);
 * };
 * ```
 * <p>
 * NOTE: The autogenerated editor only supports string types. If you need to handle special cases
 * customizing the editor is discussed below.
 * <p>
 * ### Customization
 * <p>
 * Alternatively you can fully configure the component by using `slot` names.
 * <p>
 * Slot name | Description
 * ----------------|----------------
 * `grid` | To replace the autogenerated grid with a custom one.
 * `form` | To replace the autogenerated form.
 * `toolbar` | To replace the toolbar content. Add an element with the attribure `new-button` for the new item action.
 * `new` | For customizing the 'new item' button.
 * <p>
 * #### Example:
 * ```html
 * <vaadin-crud items='[{"name": "John", "surname": "Lennon", "role": "singer"},
 * {"name": "Ringo", "surname": "Starr", "role": "drums"}]'>
 * <p>
 * <vaadin-grid slot="grid">
 * <vaadin-crud-edit-column></vaadin-crud-edit-column>
 * <vaadin-grid-column>
 * <template class="header">Name</template><template>[[item.name]]</template>
 * </vaadin-grid-column>
 * <vaadin-grid-column>
 * <template class="header">Surname</template><template>[[item.surname]]</template>
 * </vaadin-grid-column>
 * </vaadin-grid>
 * <p>
 * <vaadin-form-layout slot="form">
 * <vaadin-text-field label="First" path="name"></vaadin-text-field>
 * <vaadin-text-field label="Surname" path="surname"></vaadin-text-field>
 * </vaadin-form-layout>
 *
 * <div slot="footer">Total singers: [[size]]</div>
 *
 * <button slot="new">New singer</button>
 * </vaadin-crud>
 * ```
 * <p>
 * ### Helpers
 * <p>
 * The following elements are used to autoconfigure the grid and the editor
 * - [`<vaadin-crud-grid>`](#/elements/vaadin-crud-grid)
 * - [`<vaadin-crud-edit-column>`](#/elements/vaadin-crud-edit-column)
 * - [`<vaadin-crud-form>`](#/elements/vaadin-crud-form)
 * <p>
 * ### Styling
 * <p>
 * The following shadow DOM parts are available for styling:
 * <p>
 * Part name | Description
 * ----------------|----------------
 * `toolbar` | Toolbar container at the bottom. By default it contains the the `new` button
 * <p>
 * The following custom properties are available:
 * <p>
 * Custom Property | Description | Default
 * ----------------|----------------
 * --vaadin-crud-editor-max-height | max height of editor when opened on the bottom | 40%
 * --vaadin-crud-editor-max-width | max width of editor when opened on the side | 40%
 * <p>
 * See [ThemableMixin â€“ how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)
 */
@NpmPackage(
        name = "@vaadin/vaadin",
        version = Vaadin.VERSION
)
@Import(
        symbols = "CrudElement",
        module = "@vaadin/vaadin-crud/src/vaadin-crud.js"
)
public interface CrudElement<ITEM extends Any> extends HTMLElement, ElementMixin, ThemableMixin {
    /**
     * An array containing the items which will be stamped to the column template instances.
     */
    @Nullable
    @JSProperty
    Array<ITEM> getItems();

    /**
     * An array containing the items which will be stamped to the column template instances.
     */
    @JSProperty
    void setItems(@JSByRef ITEM... items);

    @JSProperty
    void setItems(Array<ITEM> items);

    /**
     * The item being edited in the dialog.
     */
    @Nullable
    @JSProperty
    ITEM getEditedItem();

    /**
     * The item being edited in the dialog.
     */
    @JSProperty
    void setEditedItem(ITEM editedItem);

    /**
     * Sets how editor will be presented on desktop screen.
     * <p>
     * Accepted values are:
     * - `` (default) - form will open as overlay
     * - `bottom` - form will open below the grid
     * - `aside` - form will open on the grid side (_right_, if lft and _left_ if rtl)
     */
    @Nullable
    @JSProperty
    CrudEditorPosition getEditorPosition();

    /**
     * Sets how editor will be presented on desktop screen.
     * <p>
     * Accepted values are:
     * - `` (default) - form will open as overlay
     * - `bottom` - form will open below the grid
     * - `aside` - form will open on the grid side (_right_, if lft and _left_ if rtl)
     */
    @JSProperty
    void setEditorPosition(CrudEditorPosition editorPosition);

    /**
     * Enables user to click on row to edit it.
     * Note: When enabled, autogenerated grid won't show the edit column.
     */
    @JSProperty
    boolean isEditOnClick();

    /**
     * Enables user to click on row to edit it.
     * Note: When enabled, autogenerated grid won't show the edit column.
     */
    @JSProperty
    void setEditOnClick(boolean editOnClick);

    /**
     * Function that provides items lazily. Receives arguments `params`, `callback`
     * <p>
     * `params.page` Requested page index
     * `params.pageSize` Current page size
     * `params.filters` Currently applied filters
     * `params.sortOrders` Currently applied sorting orders
     * <p>
     * `callback(items, size)` Callback function with arguments:
     * - `items` Current page of items
     * - `size` Total number of items
     */
    @Nullable
    @JSProperty
    GridDataProvider<ITEM> getDataProvider();

    /**
     * Function that provides items lazily. Receives arguments `params`, `callback`
     * <p>
     * `params.page` Requested page index
     * `params.pageSize` Current page size
     * `params.filters` Currently applied filters
     * `params.sortOrders` Currently applied sorting orders
     * <p>
     * `callback(items, size)` Callback function with arguments:
     * - `items` Current page of items
     * - `size` Total number of items
     */
    @JSProperty
    void setDataProvider(GridDataProvider<ITEM> dataProvider);

    /**
     * Disable filtering when grid is autofonfigured.
     */
    @JSProperty
    boolean isNoFilter();

    /**
     * Disable filtering when grid is autofonfigured.
     */
    @JSProperty
    void setNoFilter(boolean noFilter);

    /**
     * Disable sorting when grid is autofonfigured.
     */
    @JSProperty
    boolean isNoSort();

    /**
     * Disable sorting when grid is autofonfigured.
     */
    @JSProperty
    void setNoSort(boolean noSort);

    /**
     * Remove grid headers when it is autoconfigured.
     */
    @JSProperty
    boolean isNoHead();

    /**
     * Remove grid headers when it is autoconfigured.
     */
    @JSProperty
    void setNoHead(boolean noHead);

    /**
     * A comma-separated list of fields to include in the generated grid and the generated editor.
     * <p>
     * It can be used to explicitly define the field order.
     * <p>
     * When it is defined [`exclude`](#/elements/vaadin-crud#property-exclude) is ignored.
     * <p>
     * Default is undefined meaning that all properties in the object should be mapped to fields.
     */
    @Nullable
    @JSProperty
    String getInclude();

    /**
     * A comma-separated list of fields to include in the generated grid and the generated editor.
     * <p>
     * It can be used to explicitly define the field order.
     * <p>
     * When it is defined [`exclude`](#/elements/vaadin-crud#property-exclude) is ignored.
     * <p>
     * Default is undefined meaning that all properties in the object should be mapped to fields.
     */
    @JSProperty
    void setInclude(String include);

    /**
     * A comma-separated list of fields to be excluded from the generated grid and the generated editor.
     * <p>
     * When [`include`](#/elements/vaadin-crud#property-include) is defined, this parameter is ignored.
     * <p>
     * Default is to exclude all private fields (those properties starting with underscore)
     */
    @Nullable
    @JSProperty
    String getExclude();

    /**
     * A comma-separated list of fields to be excluded from the generated grid and the generated editor.
     * <p>
     * When [`include`](#/elements/vaadin-crud#property-include) is defined, this parameter is ignored.
     * <p>
     * Default is to exclude all private fields (those properties starting with underscore)
     */
    @JSProperty
    void setExclude(String exclude);

    /**
     * Reflects the opened status of the editor.
     */
    @JSProperty
    boolean isEditorOpened();

    /**
     * Reflects the opened status of the editor.
     */
    @JSProperty
    void setEditorOpened(boolean editorOpened);

    /**
     * Number of items in the data set which is reported by the grid.
     * Typically it reflects the number of filtered items displayed in the grid.
     */
    @JSProperty
    int getSize();

    /**
     * The object used to localize this component.
     * For changing the default localization, change the entire
     * _i18n_ object or just the property you want to modify.
     * <p>
     * The object has the following JSON structure and default values:
     * <p>
     * {
     * newItem: 'New item',
     * editItem: 'Edit item',
     * saveItem: 'Save',
     * cancel: 'Cancel',
     * deleteItem: 'Delete...',
     * editLabel: 'Edit',
     * confirm: {
     * delete: {
     * title: 'Confirm delete',
     * content: 'Are you sure you want to delete the selected item? This action cannot be undone.',
     * button: {
     * confirm: 'Delete',
     * dismiss: 'Cancel'
     * }
     * },
     * cancel: {
     * title: 'Unsaved changes',
     * content: 'There are unsaved modifications to the item.',
     * button: {
     * confirm: 'Discard',
     * dismiss: 'Continue editing'
     * }
     * }
     * }
     * }
     */
    @Nullable
    @JSProperty
    CrudI18n getI18n();

    /**
     * The object used to localize this component.
     * For changing the default localization, change the entire
     * _i18n_ object or just the property you want to modify.
     * <p>
     * The object has the following JSON structure and default values:
     * <p>
     * {
     * newItem: 'New item',
     * editItem: 'Edit item',
     * saveItem: 'Save',
     * cancel: 'Cancel',
     * deleteItem: 'Delete...',
     * editLabel: 'Edit',
     * confirm: {
     * delete: {
     * title: 'Confirm delete',
     * content: 'Are you sure you want to delete the selected item? This action cannot be undone.',
     * button: {
     * confirm: 'Delete',
     * dismiss: 'Cancel'
     * }
     * },
     * cancel: {
     * title: 'Unsaved changes',
     * content: 'There are unsaved modifications to the item.',
     * button: {
     * confirm: 'Discard',
     * dismiss: 'Continue editing'
     * }
     * }
     * }
     * }
     */
    @JSProperty
    void setI18n(CrudI18n i18n);
}
