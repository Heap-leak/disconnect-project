package com.github.fluorumlabs.disconnect.vaadin;

import com.github.fluorumlabs.disconnect.polymer.types.BooleanPropertyChangeEvent;
import com.github.fluorumlabs.disconnect.polymer.types.IntPropertyChangeEvent;
import com.github.fluorumlabs.disconnect.polymer.types.PropertyChangeEvent;
import com.github.fluorumlabs.disconnect.vaadin.constants.CrudEditorPosition;
import com.github.fluorumlabs.disconnect.vaadin.dataproviders.GridDataProvider;
import com.github.fluorumlabs.disconnect.vaadin.elements.CrudElement;
import com.github.fluorumlabs.disconnect.vaadin.i18n.CrudI18n;
import com.github.fluorumlabs.disconnect.vaadin.mixins.HasElementMixin;
import com.github.fluorumlabs.disconnect.vaadin.mixins.HasThemableMixin;
import com.github.fluorumlabs.disconnect.vaadin.types.ItemEvent;
import com.github.fluorumlabs.disconnect.zero.component.AbstractComponent;
import com.github.fluorumlabs.disconnect.zero.component.Component;
import com.github.fluorumlabs.disconnect.zero.component.HasSlottedComponents;
import com.github.fluorumlabs.disconnect.zero.observable.ObservableEvent;
import js.lang.Any;
import js.util.collections.Array;
import js.web.dom.Element;

import javax.annotation.Nullable;

/**
 * `<vaadin-crud>` is a Web Component for [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete)
 * operations.
 * <p>
 * ### Quick Start
 * <p>
 * Assign an array to the [`items`](#/elements/vaadin-crud#property-items) property.
 * <p>
 * A grid and an editor will be automatically generated and configured based on the data structure provided.
 * <p>
 * #### Example:
 * ```html
 * <vaadin-crud items='[{"name": "John", "surname": "Lennon", "role": "singer"},
 * {"name": "Ringo", "surname": "Starr", "role": "drums"}]'></vaadin-crud>
 * ```
 * <p>
 * ### Data Provider Function
 * <p>
 * Otherwise, you can provide a [`dataProvider`](#/elements/vaadin-crud#property-dataProvider) function.
 * #### Example:
 * ```html
 * <vaadin-crud></vaadin-crud>
 * ```
 * ```js
 * const crud = document.querySelector('vaadin-crud');
 * const users = [{'name': 'John', 'surname': 'Lennon', 'role': 'singer'}, ...];
 * crud.dataProvider = function(params, callback) {
 * const chunk = users.slice(params.page * params.pageSize, params.page * params.pageSize + params.pageSize);
 * callback(chunk, people.length);
 * };
 * ```
 * <p>
 * NOTE: The autogenerated editor only supports string types. If you need to handle special cases
 * customizing the editor is discussed below.
 * <p>
 * ### Customization
 * <p>
 * Alternatively you can fully configure the component by using `slot` names.
 * <p>
 * Slot name | Description
 * ----------------|----------------
 * `grid` | To replace the autogenerated grid with a custom one.
 * `form` | To replace the autogenerated form.
 * `toolbar` | To replace the toolbar content. Add an element with the attribure `new-button` for the new item action.
 * `new` | For customizing the 'new item' button.
 * <p>
 * #### Example:
 * ```html
 * <vaadin-crud items='[{"name": "John", "surname": "Lennon", "role": "singer"},
 * {"name": "Ringo", "surname": "Starr", "role": "drums"}]'>
 * <p>
 * <vaadin-grid slot="grid">
 * <vaadin-crud-edit-column></vaadin-crud-edit-column>
 * <vaadin-grid-column>
 * <template class="header">Name</template><template>[[item.name]]</template>
 * </vaadin-grid-column>
 * <vaadin-grid-column>
 * <template class="header">Surname</template><template>[[item.surname]]</template>
 * </vaadin-grid-column>
 * </vaadin-grid>
 * <p>
 * <vaadin-form-layout slot="form">
 * <vaadin-text-field label="First" path="name"></vaadin-text-field>
 * <vaadin-text-field label="Surname" path="surname"></vaadin-text-field>
 * </vaadin-form-layout>
 *
 * <div slot="footer">Total singers: [[size]]</div>
 *
 * <button slot="new">New singer</button>
 * </vaadin-crud>
 * ```
 * <p>
 * ### Helpers
 * <p>
 * The following elements are used to autoconfigure the grid and the editor
 * - [`<vaadin-crud-grid>`](#/elements/vaadin-crud-grid)
 * - [`<vaadin-crud-edit-column>`](#/elements/vaadin-crud-edit-column)
 * - [`<vaadin-crud-form>`](#/elements/vaadin-crud-form)
 * <p>
 * ### Styling
 * <p>
 * The following shadow DOM parts are available for styling:
 * <p>
 * Part name | Description
 * ----------------|----------------
 * `toolbar` | Toolbar container at the bottom. By default it contains the the `new` button
 * <p>
 * The following custom properties are available:
 * <p>
 * Custom Property | Description | Default
 * ----------------|----------------
 * --vaadin-crud-editor-max-height | max height of editor when opened on the bottom | 40%
 * --vaadin-crud-editor-max-width | max width of editor when opened on the side | 40%
 * <p>
 * See [ThemableMixin â€“ how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)
 */
public class VaadinCrud<ITEM extends Any> extends AbstractComponent<CrudElement<ITEM>>
        implements HasElementMixin<CrudElement<ITEM>, VaadinCrud<ITEM>>,
        HasThemableMixin<CrudElement<ITEM>, VaadinCrud<ITEM>>,
        HasSlottedComponents<CrudElement<ITEM>, VaadinCrud<ITEM>, Component<? extends Element>> {
    public VaadinCrud() {
        super("vaadin-crud");
    }

    /**
     * An array containing the items which will be stamped to the column template instances.
     */
    @Nullable
    public Array<ITEM> items() {
        return getNode().getItems();
    }

    /**
     * An array containing the items which will be stamped to the column template instances.
     */
    public VaadinCrud<ITEM> items(ITEM... items) {
        getNode().setItems(items);
        return this;
    }

    public VaadinCrud<ITEM> items(Array<ITEM> items) {
        getNode().setItems(items);
        return this;
    }

    /**
     * The item being edited in the dialog.
     */
    @Nullable
    public ITEM editedItem() {
        return getNode().getEditedItem();
    }

    /**
     * The item being edited in the dialog.
     */
    public VaadinCrud<ITEM> editedItem(ITEM editedItem) {
        getNode().setEditedItem(editedItem);
        return this;
    }

    /**
     * Sets how editor will be presented on desktop screen.
     * <p>
     * Accepted values are:
     * - `` (default) - form will open as overlay
     * - `bottom` - form will open below the grid
     * - `aside` - form will open on the grid side (_right_, if lft and _left_ if rtl)
     */
    @Nullable
    public CrudEditorPosition editorPosition() {
        return getNode().getEditorPosition();
    }

    /**
     * Sets how editor will be presented on desktop screen.
     * <p>
     * Accepted values are:
     * - `` (default) - form will open as overlay
     * - `bottom` - form will open below the grid
     * - `aside` - form will open on the grid side (_right_, if lft and _left_ if rtl)
     */
    public VaadinCrud<ITEM> editorPosition(CrudEditorPosition editorPosition) {
        getNode().setEditorPosition(editorPosition);
        return this;
    }

    /**
     * Enables user to click on row to edit it.
     * Note: When enabled, autogenerated grid won't show the edit column.
     */
    public boolean editOnClick() {
        return getNode().isEditOnClick();
    }

    /**
     * Enables user to click on row to edit it.
     * Note: When enabled, autogenerated grid won't show the edit column.
     */
    public VaadinCrud<ITEM> editOnClick(boolean editOnClick) {
        getNode().setEditOnClick(editOnClick);
        return this;
    }

    /**
     * Function that provides items lazily. Receives arguments `params`, `callback`
     * <p>
     * `params.page` Requested page index
     * `params.pageSize` Current page size
     * `params.filters` Currently applied filters
     * `params.sortOrders` Currently applied sorting orders
     * <p>
     * `callback(items, size)` Callback function with arguments:
     * - `items` Current page of items
     * - `size` Total number of items
     */
    @Nullable
    public GridDataProvider<ITEM> dataProvider() {
        return getNode().getDataProvider();
    }

    /**
     * Function that provides items lazily. Receives arguments `params`, `callback`
     * <p>
     * `params.page` Requested page index
     * `params.pageSize` Current page size
     * `params.filters` Currently applied filters
     * `params.sortOrders` Currently applied sorting orders
     * <p>
     * `callback(items, size)` Callback function with arguments:
     * - `items` Current page of items
     * - `size` Total number of items
     */
    public VaadinCrud<ITEM> dataProvider(GridDataProvider<ITEM> dataProvider) {
        getNode().setDataProvider(dataProvider);
        return this;
    }

    /**
     * Disable filtering when grid is autofonfigured.
     */
    public boolean noFilter() {
        return getNode().isNoFilter();
    }

    /**
     * Disable filtering when grid is autofonfigured.
     */
    public VaadinCrud<ITEM> noFilter(boolean noFilter) {
        getNode().setNoFilter(noFilter);
        return this;
    }

    /**
     * Disable sorting when grid is autofonfigured.
     */
    public boolean noSort() {
        return getNode().isNoSort();
    }

    /**
     * Disable sorting when grid is autofonfigured.
     */
    public VaadinCrud<ITEM> noSort(boolean noSort) {
        getNode().setNoSort(noSort);
        return this;
    }

    /**
     * Remove grid headers when it is autoconfigured.
     */
    public boolean noHead() {
        return getNode().isNoHead();
    }

    /**
     * Remove grid headers when it is autoconfigured.
     */
    public VaadinCrud<ITEM> noHead(boolean noHead) {
        getNode().setNoHead(noHead);
        return this;
    }

    /**
     * A comma-separated list of fields to include in the generated grid and the generated editor.
     * <p>
     * It can be used to explicitly define the field order.
     * <p>
     * When it is defined [`exclude`](#/elements/vaadin-crud#property-exclude) is ignored.
     * <p>
     * Default is undefined meaning that all properties in the object should be mapped to fields.
     */
    @Nullable
    public String include() {
        return getNode().getInclude();
    }

    /**
     * A comma-separated list of fields to include in the generated grid and the generated editor.
     * <p>
     * It can be used to explicitly define the field order.
     * <p>
     * When it is defined [`exclude`](#/elements/vaadin-crud#property-exclude) is ignored.
     * <p>
     * Default is undefined meaning that all properties in the object should be mapped to fields.
     */
    public VaadinCrud<ITEM> include(String include) {
        getNode().setInclude(include);
        return this;
    }

    /**
     * A comma-separated list of fields to be excluded from the generated grid and the generated editor.
     * <p>
     * When [`include`](#/elements/vaadin-crud#property-include) is defined, this parameter is ignored.
     * <p>
     * Default is to exclude all private fields (those properties starting with underscore)
     */
    @Nullable
    public String exclude() {
        return getNode().getExclude();
    }

    /**
     * A comma-separated list of fields to be excluded from the generated grid and the generated editor.
     * <p>
     * When [`include`](#/elements/vaadin-crud#property-include) is defined, this parameter is ignored.
     * <p>
     * Default is to exclude all private fields (those properties starting with underscore)
     */
    public VaadinCrud<ITEM> exclude(String exclude) {
        getNode().setExclude(exclude);
        return this;
    }

    /**
     * Reflects the opened status of the editor.
     */
    public boolean editorOpened() {
        return getNode().isEditorOpened();
    }

    /**
     * Reflects the opened status of the editor.
     */
    public VaadinCrud<ITEM> editorOpened(boolean editorOpened) {
        getNode().setEditorOpened(editorOpened);
        return this;
    }

    /**
     * Number of items in the data set which is reported by the grid.
     * Typically it reflects the number of filtered items displayed in the grid.
     */
    public double size() {
        return getNode().getSize();
    }

    /**
     * The object used to localize this component.
     * For changing the default localization, change the entire
     * _i18n_ object or just the property you want to modify.
     * <p>
     * The object has the following JSON structure and default values:
     * <p>
     * {
     * newItem: 'New item',
     * editItem: 'Edit item',
     * saveItem: 'Save',
     * cancel: 'Cancel',
     * deleteItem: 'Delete...',
     * editLabel: 'Edit',
     * confirm: {
     * delete: {
     * title: 'Confirm delete',
     * content: 'Are you sure you want to delete the selected item? This action cannot be undone.',
     * button: {
     * confirm: 'Delete',
     * dismiss: 'Cancel'
     * }
     * },
     * cancel: {
     * title: 'Unsaved changes',
     * content: 'There are unsaved modifications to the item.',
     * button: {
     * confirm: 'Discard',
     * dismiss: 'Continue editing'
     * }
     * }
     * }
     * }
     */
    @Nullable
    public CrudI18n i18n() {
        return getNode().getI18n();
    }

    /**
     * The object used to localize this component.
     * For changing the default localization, change the entire
     * _i18n_ object or just the property you want to modify.
     * <p>
     * The object has the following JSON structure and default values:
     * <p>
     * {
     * newItem: 'New item',
     * editItem: 'Edit item',
     * saveItem: 'Save',
     * cancel: 'Cancel',
     * deleteItem: 'Delete...',
     * editLabel: 'Edit',
     * confirm: {
     * delete: {
     * title: 'Confirm delete',
     * content: 'Are you sure you want to delete the selected item? This action cannot be undone.',
     * button: {
     * confirm: 'Delete',
     * dismiss: 'Cancel'
     * }
     * },
     * cancel: {
     * title: 'Unsaved changes',
     * content: 'There are unsaved modifications to the item.',
     * button: {
     * confirm: 'Discard',
     * dismiss: 'Continue editing'
     * }
     * }
     * }
     * }
     */
    public VaadinCrud<ITEM> i18n(CrudI18n i18n) {
        getNode().setI18n(i18n);
        return this;
    }

    /**
     * Fired when user discards edition. If the default is prevented, then
     * no action is performed, user is responsible to close dialog and reset
     * item and grid.
     */
    public ObservableEvent<ItemEvent<ITEM>> cancelEvent() {
        return createEvent("cancel");
    }

    /**
     * Fired when user wants to delete item. If the default is prevented, then
     * no action is performed, items array is not modified nor dialog closed
     */
    public ObservableEvent<ItemEvent<ITEM>> deleteEvent() {
        return createEvent("delete");
    }

    /**
     * Fired when user wants to edit an existing item. If the default is prevented, then
     * a new item is not assigned to the form, giving that responsibility to the app, though
     * dialog is always opened.
     */
    public ObservableEvent<ItemEvent<ITEM>> editEvent() {
        return createEvent("edit");
    }

    /**
     * Fired when user wants to create a new item.
     */
    public ObservableEvent<ItemEvent<ITEM>> newEvent() {
        return createEvent("new");
    }

    /**
     * Fired when user wants to save a new or an existing item. If the default is prevented, then
     * no action is performed, items array is not modified nor dialog closed
     */
    public ObservableEvent<ItemEvent<ITEM>> saveEvent() {
        return createEvent("save");
    }

    /**
     * Fired when the `items` property changes.
     */
    public ObservableEvent<PropertyChangeEvent<Array<ITEM>>> itemsChangedEvent() {
        return createEvent("items-changed");
    }

    /**
     * Fired when the `editorOpened` property changes.
     */
    public ObservableEvent<BooleanPropertyChangeEvent> editorOpenedChangedEvent() {
        return createEvent("editor-opened-changed");
    }

    /**
     * Fired when the `size` property changes.
     */
    public ObservableEvent<IntPropertyChangeEvent> sizeChangedEvent() {
        return createEvent("size-changed");
    }

    public VaadinCrud<ITEM> setGrid(Component<? extends Element> component) {
        return replaceSlotted("grid", component);
    }

    public VaadinCrud<ITEM> setGrid(Component<? extends Element>... components) {
        return replaceSlotted("grid", components);
    }

    public VaadinCrud<ITEM> addToGrid(Component<? extends Element> component) {
        return addSlotted("grid", component);
    }

    public VaadinCrud<ITEM> addToGrid(Component<? extends Element>... components) {
        return addSlotted("grid", components);
    }

    public VaadinCrud<ITEM> insertToGrid(Component<? extends Element> component) {
        return insertSlotted("grid", component);
    }

    public VaadinCrud<ITEM> insertToGrid(Component<? extends Element>... components) {
        return insertSlotted("grid", components);
    }

    public VaadinCrud<ITEM> clearGrid() {
        return removeAllSlotted("grid");
    }

    public VaadinCrud<ITEM> setToolbar(Component<? extends Element> component) {
        return replaceSlotted("toolbar", component);
    }

    public VaadinCrud<ITEM> setToolbar(Component<? extends Element>... components) {
        return replaceSlotted("toolbar", components);
    }

    public VaadinCrud<ITEM> addToToolbar(Component<? extends Element> component) {
        return addSlotted("toolbar", component);
    }

    public VaadinCrud<ITEM> addToToolbar(Component<? extends Element>... components) {
        return addSlotted("toolbar", components);
    }

    public VaadinCrud<ITEM> insertToToolbar(Component<? extends Element> component) {
        return insertSlotted("toolbar", component);
    }

    public VaadinCrud<ITEM> insertToToolbar(Component<? extends Element>... components) {
        return insertSlotted("toolbar", components);
    }

    public VaadinCrud<ITEM> clearToolbar() {
        return removeAllSlotted("toolbar");
    }

    public VaadinCrud<ITEM> setForm(Component<? extends Element> component) {
        return replaceSlotted("form", component);
    }

    public VaadinCrud<ITEM> setForm(Component<? extends Element>... components) {
        return replaceSlotted("form", components);
    }

    public VaadinCrud<ITEM> addToForm(Component<? extends Element> component) {
        return addSlotted("form", component);
    }

    public VaadinCrud<ITEM> addToForm(Component<? extends Element>... components) {
        return addSlotted("form", components);
    }

    public VaadinCrud<ITEM> insertToForm(Component<? extends Element> component) {
        return insertSlotted("form", component);
    }

    public VaadinCrud<ITEM> insertToForm(Component<? extends Element>... components) {
        return insertSlotted("form", components);
    }

    public VaadinCrud<ITEM> clearForm() {
        return removeAllSlotted("form");
    }

}
